<?xml version="1.0" encoding="UTF-8" standalone="no"?>

{% set blockHeight = 24 %}
{% set milestoneSize = 16.3 %}

{% set entryNameColumnWidth = (chart.calculate_max_entry_name() + 1) * 8.5 + 12 %}
{% set entryNameColumnHeight = blockHeight %}
{% set hourlyColumnWidth = 10 %}
{% set dailyColumnSize = hourlyColumnWidth * project.calendar.business_day_length %}

{% set gridHeight = entryNameColumnHeight * (chart.blocks | length) %}
{% set fullHeight = dailyColumnSize + gridHeight %}
{% set gridWidth = dailyColumnSize * (chart.days | list | length + 6) %}
{% set fullWidth = entryNameColumnWidth + gridWidth %}

{% set veryLightGrey = 'rgb(235, 235, 235)' %}
{% set slightlyLightGrey = 'rgb(210, 210, 210)' %}
{% set lightGrey = 'rgb(190, 190, 190)' %}
{% set darkGrey = 'rgb(50, 50, 50)' %}

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:ganttcharts="http://example.org/gantt-charts"
     version="1.1" viewBox="0 0 {{ fullWidth }} {{ fullHeight }}"
     width="{{ fullWidth }}" height="{{ fullHeight }}">

    <style>
    /* <![CDATA[ */
        text {
            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
            color: rgb(22, 23, 24);
        }

        .row {
            cursor: pointer;
        }

        rect.selected {
            fill: rgb(255, 228, 124);
        }
    /* ]]> */
    </style>

    <defs>
        <marker id="markerArrow" markerWidth="4" markerHeight="4" refX="0" refY="2"
           orient="auto">
           <path d="M0,0 L0,4 L4,2 L0,0" />
        </marker>
    </defs>

    <g id="non-working-days" transform="translate({{ entryNameColumnWidth }} 0)">
        {% for day in chart.days %}
            {% if not chart.project.calendar.is_working_date(day) %}
                <rect x="{{ dailyColumnSize * loop.index0 }}" y="0"
                      width="{{ dailyColumnSize }}" height="{{ fullHeight }}"
                      fill="{{ veryLightGrey }}" />
            {% endif %}
        {% endfor %}
    </g>

    <g id="today" transform="translate({{ entryNameColumnWidth }} 0)">
        {% set index = (today - chart.start).days %}
        <rect x="{{ dailyColumnSize * index }}" y="0"
              width="{{ dailyColumnSize }}" height="{{ fullHeight }}"
              fill="{{ slightlyLightGrey }}" />
    </g>

    <g id="days-headings" transform="translate({{ entryNameColumnWidth }} 0)">
        {% for day in chart.days %}
            <line x1="{{ dailyColumnSize * loop.index0 + 100 * 1.732 }}"
                  y1="{{ dailyColumnSize - 100 }}"
                  x2="{{ dailyColumnSize * loop.index0 }}"
                  y2="{{ dailyColumnSize }}"
                  stroke="{{ lightGrey }}" stroke-width="1" />

            <text x="-1" y="-5"
                  transform="rotate(-30 {{ loop.index0 * dailyColumnSize }} {{ dailyColumnSize }}) translate({{ loop.index0 * dailyColumnSize }} {{ dailyColumnSize }})">
                {{ day.strftime('%a %-d %b %Y') }}
            </text>
        {% endfor %}
    </g>

    <g id="entry-names" transform="translate(0 {{ dailyColumnSize }})">
        {% for block in chart.blocks.values() %}
            <rect x="0" y="{{ loop.index0 * entryNameColumnHeight + 1 }}"
                  width="{{ entryNameColumnWidth }}" height="{{ entryNameColumnHeight - 2 }}"
                  fill="white" class="row"
                  ganttcharts:entry-id="{{ block.entry.id }}" />
            <text x="{{ entryNameColumnWidth }}" y="{{ loop.index * entryNameColumnHeight }}"
                  dy="-6" dx="-6" class="row" text-anchor="end"
                  ganttcharts:entry-id="{{ block.entry.id }}">
                <tspan>{{ block.entry.name }}</tspan>
            </text>
            <line x1="0" y1="{{ loop.index * entryNameColumnHeight }}"
                  x2="{{ entryNameColumnWidth }}" y2="{{ loop.index * entryNameColumnHeight }}"
                  stroke="{{ lightGrey }}" stroke-width="1" />
        {% endfor %}
    </g>

    <g id="grid" transform="translate({{ entryNameColumnWidth }} {{ dailyColumnSize }})">
        <!-- horizontal -->
        {% for i in range((chart.blocks | length) + 1) %}
            <line x1="0" x2="{{ gridWidth }}"
                  y1="{{ i * blockHeight }}" y2="{{ i * blockHeight }}"
                  stroke="{{ lightGrey }}" stroke-width="1" />
        {% endfor %}

        <!-- vertical -->
        {% for i in range((chart.days | list | length) + 6) %}
            <line x1="{{ i * dailyColumnSize }}" x2="{{ i * dailyColumnSize }}"
                  y1="0" y2="{{ gridHeight }}"
                  stroke="{{ darkGrey }}" stroke-width="1" />
            {% for j in range(1, project.calendar.business_day_length) %}
                <line x1="{{ i * dailyColumnSize + j * hourlyColumnWidth }}" x2="{{ i * dailyColumnSize + j * hourlyColumnWidth }}"
                      y1="0" y2="{{ gridHeight }}"
                      stroke="{{ lightGrey }}" stroke-width="1" />
            {% endfor %}
        {% endfor %}
    </g>

    <g id="blocks" transform="translate({{ entryNameColumnWidth }} {{ dailyColumnSize }})">
        {% for block in chart.blocks.values() %}
            {% if block.entry.type.name == 'milestone' %}
                <line x1="{{ (block.left_cells + block.cells) * hourlyColumnWidth }}" y1="0"
                      x2="{{ (block.left_cells + block.cells) * hourlyColumnWidth }}" y2="{{ gridHeight }}"
                      stroke="{{ block.colour }}" stroke-width="2" />
            {% endif %}
        {% endfor %}

        {% for block in chart.blocks.values() %}
            {% set y = loop.index0 * blockHeight %}

            <rect x="{{ 0 }}" y="{{ y }}"
                  width="{{ block.left_cells * hourlyColumnWidth }}" height="{{ blockHeight }}"
                  stroke="none" fill="rgba(255, 255, 255, 0)" class="row"
                  ganttcharts:entry-id="{{ block.entry.id }}" />

            {% if block.entry.type.name == 'task' %}
                <rect x="{{ block.left_cells * hourlyColumnWidth }}" y="{{ y }}"
                      width="{{ block.cells * hourlyColumnWidth }}" height="{{ blockHeight }}"
                      stroke="{{ darkGrey }}" stroke-width="1" fill="{{ block.colour }}" class="row"
                      ganttcharts:entry-id="{{ block.entry.id }}" />
            {% else %}
                <rect x="{{ (block.left_cells + block.cells) * hourlyColumnWidth }}" y="{{ y }}"
                      width="{{ milestoneSize }}" height="{{ milestoneSize }}"
                      stroke="{{ darkGrey }}" stroke-width="1" fill="{{ block.colour }}" class="row"
                      transform="rotate(45 {{ (block.left_cells + block.cells) * hourlyColumnWidth }} {{ y }})"
                      ganttcharts:entry-id="{{ block.entry.id }}" />
            {% endif %}

            <rect x="{{ (block.left_cells + block.cells) * hourlyColumnWidth }}" y="{{ y }}"
                  width="{{ block.right_cells * hourlyColumnWidth }}" height="{{ blockHeight }}"
                  stroke="none" fill="rgba(255, 255, 255, 0)" class="row"
                  ganttcharts:entry-id="{{ block.entry.id }}" />
        {% endfor %}

        {% for block in chart.blocks.values() %}
            {% set y = loop.index0 * blockHeight %}

            {% for dependee in block.entry.dependees %}
                {% set dependeeBlock = chart.blocks[dependee.parent] %}
                {% set x2 = dependeeBlock.left_cells * hourlyColumnWidth + hourlyColumnWidth / 2 %}

                <line x1="{{ (block.left_cells + block.cells) * hourlyColumnWidth }}" y1="{{ y + blockHeight / 2 }}"
                      x2="{{ x2 }}" y2="{{ y + blockHeight / 2 }}"
                      stroke="{{ block.colour }}" stroke-width="2" />
                <line x1="{{ x2 }}" y1="{{ y + blockHeight / 2 }}"
                      x2="{{ x2 }}" y2="{{ dependeeBlock.index * blockHeight - 8 }}"
                      stroke="{{ block.colour }}" stroke-width="2"
                      style="marker-end: url(#markerArrow);" />
            {% endfor %}
        {% endfor %}
    </g>

    <script>
        <![CDATA[
        (function() {
            'use strict';

            var TAG = 'Gantt Chart';

            var rows = document.querySelectorAll('.row');
            var isSelecting = false;

            document.openEntry = function(entryId) {
                console.log(TAG, 'Opening', entryId);
                document.dispatchEvent(new CustomEvent('open-entry', {detail: entryId}));
            };

            document.selectEntry = function(entryId, fireEvent) {
                console.log(TAG, 'Selecting', entryId);

                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    var rowEntryId = row.getAttributeNS('http://example.org/gantt-charts', 'entry-id');
                    if (rowEntryId == entryId) {
                        row.setAttribute('class', 'row selected');
                    }
                }

                if (fireEvent === true) {
                    document.dispatchEvent(new CustomEvent('select-entry', {detail: entryId}));
                }
            };

            document.deselectEntry = function(entryId, fireEvent) {
                console.log(TAG, 'Deselecting', entryId);

                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    var rowEntryId = row.getAttributeNS('http://example.org/gantt-charts', 'entry-id');
                    if (rowEntryId == entryId) {
                        row.setAttribute('class', 'row');
                    }
                }

                if (fireEvent === true) {
                    document.dispatchEvent(new CustomEvent('deselect-entry', {detail: entryId}));
                }
            };

            document.clearSelection = function() {
                console.log(TAG, 'Clearing selection.');

                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    row.setAttribute('class', 'row');
                }
            };

            document.getSelectedEntryIds = function() {
                var selected = [];

                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    var className = row.getAttribute('class');
                    if (className.indexOf('selected') !== -1) {
                        var rowEntryId = row.getAttributeNS('http://example.org/gantt-charts', 'entry-id');
                        if (selected.indexOf(rowEntryId) === -1) {
                            selected.push(rowEntryId);
                        }
                    }
                }

                return selected;
            };

            document.startSelecting = function() {
                console.log(TAG, 'Starting selection.');
                isSelecting = true;
            };

            document.stopSelecting = function() {
                console.log(TAG, 'Stopping selection.');

                isSelecting = false;
                document.clearSelection();
            };

            document.saveState = function() {
                console.log(TAG, 'Saving state.');

                return {
                    isSelecting: isSelecting,
                    selectedEntries: document.getSelectedEntryIds(),
                }
            };

            document.restoreState = function(state) {
                console.log(TAG, 'Restoring state to:', state);
                if (state) {
                    document.clearSelection();
                    isSelecting = state.isSelecting;
                    for (var i = 0; i < state.selectedEntries.length; i++) {
                        document.selectEntry(state.selectedEntries[i]);
                    }
                }
            };

            for (var i = 0; i < rows.length; i++) {
                (function(row) {
                    var entryId = row.getAttributeNS('http://example.org/gantt-charts', 'entry-id');
                    row.onclick = function(e) {
                        if (isSelecting) {
                            var className = row.getAttribute('class');
                            if (className.indexOf('selected') === -1) {
                                document.selectEntry(entryId, true);
                            } else {
                                document.deselectEntry(entryId, true);
                            }
                        } else {
                            document.openEntry(entryId);
                        }

                        e.stopPropagation();
                    };
                }(rows[i]));
            }
        }());
        ]]>
    </script>

</svg>
